{
	"info": {
		"_postman_id": "3f842275-2393-4634-ba22-78f61765858a",
		"name": "Rick and Morty API Test Suite",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46011802",
		"_collection_link": "https://suruchi-523849.postman.co/workspace/5ec38574-c72c-4304-8cff-6a926aecb795/collection/46011802-3f842275-2393-4634-ba22-78f61765858a?action=share&source=collection_link&creator=46011802"
	},
	"item": [
		{
			"name": "Characters",
			"item": [
				{
					"name": "GET Character by Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Character is present in response\", function () {",
									"    let expectedName = pm.iterationData.get(\"expectedCharacterName\");",
									"    let result = pm.response.json().results || [];",
									"    let found = result.some(c => c.name === expectedName);",
									"    pm.expect(found).to.be.true;",
									"});",
									"",
									"pm.test(\"Validate count\", function () {",
									"    let expected = pm.iterationData.get(\"expectedCount\");",
									"    let actual = pm.response.json().results?.length || 0;",
									"    pm.expect(actual).to.eql(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://rickandmortyapi.com/api/character?name={{name}}&status={{status}}&species={{species}}&gender={{gender}}",
							"protocol": "https",
							"host": [
								"rickandmortyapi",
								"com"
							],
							"path": [
								"api",
								"character"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}"
								},
								{
									"key": "status",
									"value": "{{status}}"
								},
								{
									"key": "species",
									"value": "{{species}}"
								},
								{
									"key": "gender",
									"value": "{{gender}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Episodes",
			"item": [
				{
					"name": "GET Episode by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const json = pm.response.json();",
									"",
									"pm.test(\"Episode name matches\", function () {",
									"    pm.expect(json.name).to.eql(pm.iterationData.get(\"expectedEpisodeName\"));",
									"});",
									"",
									"pm.test(\"Air date matches\", function () {",
									"    pm.expect(json.air_date).to.eql(pm.iterationData.get(\"expectedAirDate\"));",
									"});",
									"",
									"pm.test(\"Character count matches\", function () {",
									"    pm.expect(json.characters.length).to.eql(parseInt(pm.iterationData.get(\"expectedCharacterCount\")));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://rickandmortyapi.com/api/episode/{{episodeCode}}",
							"protocol": "https",
							"host": [
								"rickandmortyapi",
								"com"
							],
							"path": [
								"api",
								"episode",
								"{{episodeCode}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Locations",
			"item": [
				{
					"name": "GET Location by Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let json = pm.response.json();",
									"let location = json.results && json.results[0];",
									"",
									"pm.test(\"Location type is correct\", function () {",
									"    pm.expect(location.type).to.eql(pm.iterationData.get(\"expectedType\"));",
									"});",
									"",
									"pm.test(\"Location dimension is correct\", function () {",
									"    pm.expect(location.dimension).to.eql(pm.iterationData.get(\"expectedDimension\"));",
									"});",
									"",
									"pm.test(\"Resident count is correct\", function () {",
									"    pm.expect(location.residents.length).to.be.at.least(parseInt(pm.iterationData.get(\"expectedResidentCount\")));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://rickandmortyapi.com/api/location?name={{locationName}}",
							"protocol": "https",
							"host": [
								"rickandmortyapi",
								"com"
							],
							"path": [
								"api",
								"location"
							],
							"query": [
								{
									"key": "name",
									"value": "{{locationName}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}