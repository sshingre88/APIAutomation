{
	"info": {
		"_postman_id": "46011802-1f927e62-65b2-4757-b30f-9af40d10939c",
		"name": "WitnessAI-Assessment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "TestScenarios",
			"item": [
				{
					"name": "Characters",
					"item": [
						{
							"name": "GetSingleCharacter",
							"item": [
								{
									"name": "ValidCharacter",
									"id": "46011802-e8dc7522-c456-4289-a155-adce47d3864d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": []
									},
									"response": []
								},
								{
									"name": "InvalidCharacter",
									"id": "46011802-39b7f7b4-7fd2-4dd6-b987-7b38b93407cb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": []
									},
									"response": []
								},
								{
									"name": "InvalidIdType",
									"id": "46011802-5f03d1c1-f7db-430e-ac3a-b4477cecb843",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": []
									},
									"response": []
								}
							],
							"id": "46011802-c8b461a1-e114-4e0a-9104-880193359954"
						},
						{
							"name": "GetAllCharacters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3209c6a1-f38b-49f7-a6c0-a358cb68cc99",
										"exec": [
											"var jsonData= null;\r",
											"var expectedCharacterCount=pm.variables.get(\"TotalCharacters\");\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"     jsonData = pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(\"Check total character count\", function () {\r",
											"    pm.expect(jsonData.info.count==expectedCharacterCount);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if the value is an integer type for pages object\", function () {\r",
											"   if('pages' in jsonData.info){\r",
											"        const pagesValueToCheck = jsonData.info.pages;\r",
											"        pm.variables.set(\"AvailablePages\", pagesValueToCheck);\r",
											"        pm.expect(Number.isInteger(pagesValueToCheck)).to.be.true;\r",
											"   }\r",
											"   else\r",
											"     pm.expect.fail(\"This test failed because an info object doesn't return pages information.\");\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"Check if the value is an integer type for count object\", function () {\r",
											"   if('count' in jsonData.info){\r",
											"        const countValueToCheck = jsonData.info.count;\r",
											"        pm.expect(Number.isInteger(countValueToCheck)).to.be.true;\r",
											"   }\r",
											"   else\r",
											"     pm.expect.fail(\"This test failed because an info object doesn't return pages information.\");\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"Check if the value is of string type for next field\", function () {\r",
											"   if('next' in jsonData.info){\r",
											"        const countValueToCheck = jsonData.info.next;\r",
											"        if(countValueToCheck!=null)\r",
											"             pm.expect(countValueToCheck).to.be.a(\"string\");\r",
											"   }\r",
											"   else\r",
											"     pm.expect.fail(\"This test failed because an info object doesn't return next page url information.\");\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"Check if the value is of string type for prev field\", function () {\r",
											"   if('next' in jsonData.info){\r",
											"        const countValueToCheck = jsonData.info.prev;\r",
											"        if(countValueToCheck!=null)\r",
											"             pm.expect(countValueToCheck).to.be.a(\"string\");\r",
											"   }\r",
											"   else\r",
											"     pm.expect.fail(\"This test failed because an info object doesn't return previous page url information.\");\r",
											"    \r",
											"});\r",
											"\r",
											"//check default page=1 when no page parameter is provided\r",
											"pm.test(\"Check default page=0 when no page parameter is provided\", function () {\r",
											"        var nextPageUrl = jsonData.info.next;\r",
											"\r",
											"        pm.expect(jsonData.info.prev).to.eql(null);\r",
											"        pm.expect(nextPageUrl).satisfy(val => val.split('page=')[1] == (2));\r",
											"    \r",
											"});\r",
											"\r",
											"//validate sort order of characters\r",
											"pm.test(\"validate sort order of characters\", function () {\r",
											"        eval(\"var isSortedById = \" + pm.globals.get(\"isSortedById\"));\r",
											"        let ids = jsonData.results.map(character => character.id);\r",
											"        pm.collectionVariables.set(\"characterIds\", ids);\r",
											"        pm.expect(isSortedById(ids)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8e0ec6ce-d57f-4e62-85ea-c9a9669d2715",
										"exec": [
											"const count = pm.info.iteration;\r",
											"\r",
											"console.log(\"Iteration count \"+count);\r",
											"if(count>0)\r",
											"    pm.execution.skipRequest();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "46011802-9b6fb763-a6b8-4435-a7d9-ca218c0c162d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{Host}}/api/character",
									"protocol": "https",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"character"
									]
								}
							},
							"response": []
						},
						{
							"name": "Pagination",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2bd58cd5-d0a7-4ce7-b3f7-f59a6e686009",
										"exec": [
											"var currentPage=  pm.variables.get(\"RandomPageAccess\");\r",
											"var maxAvailablePages=pm.variables.get(\"AvailablePages\");\r",
											"var scenarioDescription=pm.variables.get(\"ScenarioDescription\");\r",
											"\r",
											"pm.test(\"Pagination Tests: \"+scenarioDescription+ \" \"+currentPage, function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var nextPageUrl;\r",
											"    var prevPageUrl;\r",
											"    console.log(nextPageUrl);\r",
											"\r",
											"    if(currentPage==maxAvailablePages){\r",
											"        nextPageUrl = jsonData.info.next;\r",
											"        prevPageUrl=jsonData.info.prev;\r",
											"\r",
											"        pm.expect(jsonData.info.next).to.eql(null);\r",
											"        pm.expect(prevPageUrl).satisfy(val => val.split('page=')[1] == (currentPage-1));\r",
											"\r",
											"    }\r",
											"    \r",
											"    else if(currentPage > maxAvailablePages){\r",
											"        pm.response.to.have.status(404);\r",
											"    }\r",
											"    else {\r",
											"        nextPageUrl = jsonData.info.next;\r",
											"        prevPageUrl=jsonData.info.prev;\r",
											"\r",
											"        pm.expect(nextPageUrl).satisfy(val => val.split('page=')[1] == (currentPage+1));\r",
											"        pm.expect(prevPageUrl).satisfy(val => val.split('page=')[1] == (currentPage-1));\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5eeac4dc-e107-45b9-9a9c-5fa5e8f15afb",
										"exec": [
											"const pages= pm.variables.get(\"AvailablePages\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "46011802-088837b1-e42d-490c-8ec2-42f874fad1a5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{Host}}/api/character?page={{RandomPageAccess}}",
									"protocol": "https",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"character"
									],
									"query": [
										{
											"key": "page",
											"value": "{{RandomPageAccess}}"
										}
									]
								},
								"description": "## Overview\n\nThis endpoint retrieves a list of characters from the API. It supports pagination, allowing users to access different pages of character data.\n\n## Request Parameters\n\n- **page** (integer, required): Specifies the page number of the character list to retrieve. Replace `{{RandomPageAccess}}` with the desired page number.\n    \n\n## Response Format\n\nThe response is returned in JSON format and includes the following structure:\n\n- **info**: An object containing metadata about the request.\n    \n    - **count** (integer): The total number of characters available.\n        \n    - **pages** (integer): The total number of pages available based on the character count.\n        \n    - **next** (string or null): A URL to the next page of results, if available.\n        \n    - **prev** (string): A URL to the previous page of results, if available.\n        \n- **results**: An array of character objects, where each object contains:\n    \n    - **id** (integer): The unique identifier for the character.\n        \n    - **name** (string): The name of the character.\n        \n    - **status** (string): The current status of the character (e.g., alive, dead).\n        \n    - **species** (string): The species of the character.\n        \n    - **type** (string): The type of character, if applicable.\n        \n    - **gender** (string): The gender of the character.\n        \n    - **origin**: An object containing:\n        \n        - **name** (string): The name of the character's origin.\n            \n        - **url** (string): A URL to more information about the origin.\n            \n    - **location**: An object containing:\n        \n        - **name** (string): The name of the character's current location.\n            \n        - **url** (string): A URL to more information about the location.\n            \n    - **image** (string): A URL to an image of the character.\n        \n    - **episode** (array of strings): A list of episodes in which the character appeared.\n        \n    - **url** (string): A URL to more information about the character.\n        \n    - **created** (string): A timestamp indicating when the character was created.\n        \n\n## Pagination Notes\n\n- Use the **page** parameter to navigate through the list of characters. The **info** object in the response will indicate the total number of characters and available pages, as well as links to the next and previous pages if applicable."
							},
							"response": []
						},
						{
							"name": "GetSingleCharacter",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e2a3dd2c-1a55-436e-8c00-eed2fc8cca22",
										"exec": [
											"const loopCount =  pm.environment.get(\"SingleCharacterLoopCount\");\r",
											"const iterationCountToSkipPaginationTests = pm.info.iteration;\r",
											"\r",
											"console.log(\"iterationCountToSkipPaginationTests \"+iterationCountToSkipPaginationTests);\r",
											"\r",
											"if(loopCount==0 ){\r",
											"\r",
											"\r",
											"// Get the comma-separated IDs string from collection variable\r",
											"var idsString = pm.collectionVariables.get(\"characterIds\");\r",
											"\r",
											"//converting character ids into string if it's not already a string. This is to handle cases where the variable might be a number or an array.\r",
											"if (idsString && typeof idsString !== \"string\") {\r",
											"    idsString = String(idsString);\r",
											"}\r",
											"// Split into array\r",
											"var idsArray = idsString ? idsString.split(\",\") : [];\r",
											"\r",
											"// Get the first ID (or any other index)\r",
											"var firstId = idsArray.length > 0 ? idsArray[0] : null;\r",
											"\r",
											"// Log or use it\r",
											"console.log(\"First character ID:\", firstId);\r",
											"\r",
											"// Optionally set it as another collection variable\r",
											"pm.collectionVariables.set(\"CharacterId\", firstId);\r",
											"}\r",
											"\r",
											"else if(loopCount==1){\r",
											"    pm.collectionVariables.set(\"CharacterId\", -1);\r",
											"\r",
											"}\r",
											"\r",
											"else{\r",
											"    pm.collectionVariables.set(\"CharacterId\", 999999999.10);\r",
											"    pm.environment.set(\"SingleCharacterLoopCount\",0);\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1670dd67-8b61-44ea-895a-51ced97aecd3",
										"exec": [
											"let loopCount =  pm.environment.get(\"SingleCharacterLoopCount\");\r",
											"let counter = parseInt(pm.variables.get(\"loopCounter\") || \"0\");\r",
											"let names = [\"Alice\", \"Bob\", \"Charlie\", \"Dave\", \"Eve\"];\r",
											"\r",
											"loopCount++;\r",
											"\r",
											"while (loopCount<3){\r",
											"\r",
											"if(loopCount==0){\r",
											"        pm.test(\"Verify a valid character id is returning a 200 status code and correct information\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"        var responseJson = pm.response.json();\r",
											"        var expectedCharacterId= pm.collectionVariables.get(\"CharacterId\");\r",
											"        pm.environment.set(\"SingleCharacterLoopCount\", loopCount+1);\r",
											"        pm.expect(responseJson.id==expectedCharacterId);\r",
											"        pm.execution.setNextRequest(\"GetSingleCharacter\");\r",
											"\r",
											"    });\r",
											"}\r",
											"    \r",
											"else if(loopCount==1){\r",
											"        pm.test(\"Verify a invalid character id is returning a 404 status code with no information\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"        pm.environment.set(\"SingleCharacterLoopCount\", loopCount+1);\r",
											"        pm.expect(responseJson.id==expectedCharacterId);\r",
											"        pm.sendRequest(\"GetSingleCharacter\");\r",
											"    \r",
											"    });\r",
											"}\r",
											"else {\r",
											"        pm.test(\"Verify that an API failed gracefully when invalid type (decimal value) has passed in the request.\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"        pm.environment.set(\"SingleCharacterLoopCount\", loopCount+1);\r",
											"        pm.expect(responseJson.id==expectedCharacterId);\r",
											"        pm.sendRequest(\"GetSingleCharacter\");\r",
											"    });\r",
											"}\r",
											"  \r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "46011802-b631c9b4-e166-4378-b676-4b2af18c3c2c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{Host}}/api/character/{{CharacterId}}",
									"protocol": "https",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"character",
										"{{CharacterId}}"
									]
								}
							},
							"response": []
						}
					],
					"id": "46011802-cb61758c-00f1-4631-8362-2bc154fd43a9"
				}
			],
			"id": "46011802-477cdad7-d943-45ef-8453-83fff6ed6bc2"
		},
		{
			"name": "APIResources",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "95720748-ee7e-41e4-b7f4-b891f15b0f20",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "a0a0e3f1-81f0-4814-97be-7d769aff8047",
						"exec": [
							"const count = pm.info.iteration;\r",
							"\r",
							"if(count>0)\r",
							"    pm.execution.skipRequest();"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "46011802-ec63969c-55ac-49ad-ba50-7e7ebe40de24",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{Host}}/api",
					"protocol": "https",
					"host": [
						"{{Host}}"
					],
					"path": [
						"api"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "69108604-0669-4d18-83ed-418d5ea123f8",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"//Util Functions"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "8c0c98b9-5c20-45ca-961c-ca3e6b97563f",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Collection-level script\r",
					"function isSortedById(array) {\r",
					"  for (let i = 1; i < array.length; i++) {\r",
					"    console.log(array[i]);\r",
					"    if (array[i] < array[i - 1]) return false;\r",
					"  }\r",
					"  return true;\r",
					"}\r",
					"\r",
					"// Expose globally via pm.globals.set (if needed)\r",
					"pm.globals.set(\"isSortedById\", isSortedById.toString());\r",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "characterIds",
			"value": ""
		},
		{
			"key": "CharacterId",
			"value": ""
		}
	]
}